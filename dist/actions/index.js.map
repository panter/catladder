{"version":3,"sources":["../../src/actions/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import prompt from 'prompt';\nimport remoteExec from 'ssh-exec';\nimport rimraf from 'rimraf';\nimport yaml from 'js-yaml';\nimport _ from 'lodash';\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { androidInit, androidPrepareForStore, getAndroidBuildDir, getAndroidBuildProjectFolder } from '../build/android_build';\nimport {\n  getBuildNumberFromGit,\n  getTagFromGit,\n} from '../utils/git_utils';\nimport { getSshConfig, readConfig, writeConfig, createEnvSh } from '../utils/config_utils';\nimport { initSchema, environmentSchema } from '../configs/prompt_schemas';\nimport { passEnvFile, getBuildDir, getIosBuildProjectFolder } from '../configs/directories';\nimport { version } from '../../package.json';\nimport { writePass, editPass, readPassYaml } from '../utils/pass_utils';\nimport actionTitle from '../ui/action_title';\nimport defaultEnv from '../configs/default_env';\nimport execMeteorBuild from '../build/exec_meteor_build';\n\nconst CONFIGFILE = '.catladder.yaml';\n\nconst getFullVersionString = env => `${env}-${getTagFromGit()}@${getBuildNumberFromGit()}`;\n\nconst actions = {\n  init(__, done) {\n    const configOld = (fs.existsSync(CONFIGFILE) && readConfig(CONFIGFILE)) || {};\n    prompt.start();\n    prompt.get(initSchema(configOld), (error,\n      configNew,\n    ) => {\n      const config = {\n        ...configOld,\n        ...configNew,\n      };\n      writeConfig(CONFIGFILE, config);\n      const buildDir = path.resolve(config.buildDir);\n      if (!fs.existsSync(buildDir)) {\n        fs.mkdirSync(buildDir);\n      }\n      done(null, `created ${CONFIGFILE}`);\n    });\n  },\n  setup(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    prompt.start();\n\n    actionTitle(`setting up ${environment}`);\n    const passPathForEnvVars = passEnvFile({ config, environment });\n    // console.log(passPathForEnvVars);\n    const oldEnvConfig = _.get(config, ['environments', environment], {});\n    prompt.get(environmentSchema({ ...config, environment }), (error, envConfig) => {\n      // write new envConfig\n      config.environments = {\n        ...config.environments,\n        [environment]: {\n          ...oldEnvConfig, // merge with old config\n          ...envConfig,\n        },\n      };\n      writeConfig(CONFIGFILE, config);\n      // update env-vars in path\n      // first get current vars in path\n      let envVars = readPassYaml(passPathForEnvVars);\n      // if envVars do not exist yet, create new one and write to pass\n      if (_.isEmpty(envVars)) {\n        envVars = defaultEnv({ config, envConfig });\n        writePass(passPathForEnvVars, yaml.safeDump(envVars));\n      }\n      // open editor to edit the en vars\n      editPass(passPathForEnvVars);\n      // load changed envVars and create env.sh on server\n      // we create ROOT_URL always from the config\n      const envSh = createEnvSh(\n        { version, environment },\n        {\n          ...readPassYaml(passPathForEnvVars),\n          ROOT_URL: envConfig.url,\n        },\n      );\n      // create env.sh on server\n      remoteExec(`echo \"${envSh.replace(/\"/g, '\\\\\"')}\" > ~/app/env.sh`, getSshConfig(CONFIGFILE, environment), (err) => {\n        if (err) {\n          throw err;\n        }\n        console.log('');\n        console.log('~/app/env.sh has ben written on ', envConfig.host);\n        done(null, `${environment} is set up, please restart server`);\n      }).pipe(process.stdout);\n    });\n  },\n  editEnv(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    const passPathForEnvVars = passEnvFile({ config, environment });\n    editPass(passPathForEnvVars);\n    done(null, 'env in pass edited. Remember that this not updates the server. Use catladder setup <env> to do so');\n  },\n  restart(environment, done) {\n    actionTitle(`restarting ${environment}`);\n    remoteExec('./bin/nodejs.sh restart', getSshConfig(CONFIGFILE, environment), () => {\n      done(null, 'server restarted');\n    }).pipe(process.stdout);\n  },\n  buildServer(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    // read build params\n    actionTitle(`building server ${getFullVersionString(environment)}`);\n\n    execMeteorBuild({ config, environment }, ['--server-only']);\n    done(null, 'server built');\n  },\n  buildApps(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    const buildDir = getBuildDir({ config, environment });\n    actionTitle(`building mobile apps ${getFullVersionString(environment)}`);\n    console.log(`build dir: ${buildDir}`);\n\n    // remove project folders if existing\n    // otherwise apps might get bloated with old code\n    if (fs.existsSync(getAndroidBuildProjectFolder({ config, environment }))) {\n      rimraf.sync(getAndroidBuildProjectFolder({ config, environment }));\n    }\n    if (fs.existsSync(getIosBuildProjectFolder({ config, environment }))) {\n      rimraf.sync(getIosBuildProjectFolder({ config, environment }));\n    }\n\n    execMeteorBuild({ config, environment });\n\n    // open ios project if exists\n    actions.iosRevealProject(environment, config);\n\n    // init android if it exists\n    if (fs.existsSync(getAndroidBuildDir({ config, environment }))) {\n      actions.androidPrepareForStore(environment, done);\n    } else {\n      done(null, `apps created in ${buildDir}`);\n    }\n  },\n  iosRevealProject(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    if (fs.existsSync(getIosBuildProjectFolder({ config, environment }))) {\n      execSync(`open ${getIosBuildProjectFolder({ config, environment })}`);\n    } else {\n      done(null, `ios project does not exist under ${getIosBuildProjectFolder({ config, environment })}`);\n    }\n  },\n  androidPrepareForStore(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    const outfile = androidPrepareForStore({ config, environment });\n    done(null, `your apk is ready: ${outfile}`);\n  },\n  androidInit(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    androidInit({ config, environment });\n    done(null, 'android is init');\n  },\n  uploadServer(environment, done) {\n    const next = () => actions.restart(environment, done);\n    const config = readConfig(CONFIGFILE);\n    // const envConf = config.environments[environment];\n    const sshConfig = getSshConfig(CONFIGFILE, environment);\n    actionTitle(`uploading server bundle to ${environment}`);\n    const buildDir = getBuildDir({ config, environment });\n    execSync(`scp ${buildDir}/app.tar.gz ${sshConfig.user}@${sshConfig.host}:`, { stdio: 'inherit' });\n    remoteExec(`\n        rm -rf ~/app/last\n        mv ~/app/bundle ~/app/last\n        rm ~/app/current\n        ln -s ~/app/bundle ~/app/current\n        tar xfz app.tar.gz -C app\n        pushd ~/app/bundle/programs/server\n        npm install\n        popd\n      `, sshConfig, next).pipe(process.stdout);\n  },\n  deploy(environment, done) {\n    actionTitle(`deploying ${environment}`);\n    actions.buildServer(environment, () => {\n      actions.uploadServer(environment, done);\n    });\n  },\n};\n\nexport default actions;\n"]}