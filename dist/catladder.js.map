{"version":3,"sources":["../src/catladder.js"],"names":[],"mappings":"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","file":"catladder.js","sourcesContent":["import _ from 'lodash';\nimport camelCase from 'camelcase';\nimport minimist from 'minimist';\nimport prompt from 'prompt';\nimport remoteExec from 'ssh-exec';\nimport yaml from 'js-yaml';\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport { getSshConfig, readConfig, writeConfig, createEnvSh } from './config_utils';\nimport { androidInit, androidPrepareForStore, getAndroidBuildDir, getAndroidBuildProjectFolder } from './android_build';\nimport { initSchema, environmentSchema } from './prompt_schemas';\nimport { intro, actionTitle } from './logs';\nimport { version } from '../package.json';\nimport { writePass, editPass, readPassYaml } from './pass_utils';\n\nconst getBuildDir = ({ config, environment }) => path.resolve(`${config.buildDir}/${environment}`);\nconst getIosBuildDir = ({ config, environment }) => `${getBuildDir({ config, environment })}/ios`;\nconst getIosBuildProjectFolder = ({ config, environment }) => `${getIosBuildDir({ config, environment })}/project`;\nconst CONFIGFILE = '.catladder.yaml';\nconst options = minimist(process.argv.slice(2));\nconst passEnvFile = ({ config, environment }) => `${config.passPath}/${environment}/env.yaml`;\n\nconst execInstallNpmModules = ({ config }) => {\n  execSync(`meteor ${config.useYarn ? 'yarn' : 'npm'} install`, { cwd: config.appDir, stdio: 'inherit' });\n};\n\nconst execMeteorBuild = ({ config, environment }, args = []) => {\n  const buildDir = getBuildDir({ config, environment });\n  const envConf = config.environments[environment];\n  // read build params\n  const { buildEnv } = envConf;\n  const buildEnvString = _.map(buildEnv, (value, key) => `${key}='${value}'`).join(' ');\n  execSync(\n    `${buildEnvString} meteor build ${args.join(' ')} --server ${envConf.url} ${buildDir}`,\n    { cwd: config.appDir, stdio: 'inherit' },\n  );\n};\n\nconst defaultEnv = ({ config }) => ({\n  PORT: 8080,\n  MONGO_URL: `mongodb://localhost/${config.appname}`,\n  MONGO_OPLOG_URL: 'mongodb://localhost/local',\n  MAIL_URL: 'smtp://localhost:25',\n  METEOR_SETTINGS: {\n  },\n});\n\nconst actions = {\n  init(__, done) {\n    const configOld = (fs.existsSync(CONFIGFILE) && readConfig(CONFIGFILE)) || {};\n    prompt.start();\n    prompt.get(initSchema(configOld), (error,\n      configNew,\n    ) => {\n      const config = {\n        ...configOld,\n        ...configNew,\n      };\n      writeConfig(CONFIGFILE, config);\n      const buildDir = path.resolve(config.buildDir);\n      if (!fs.existsSync(buildDir)) {\n        fs.mkdirSync(buildDir);\n      }\n      done(null, `created ${CONFIGFILE}`);\n    });\n  },\n  setup(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    prompt.start();\n\n    actionTitle(`setting up ${environment}`);\n    const passPathForEnvVars = passEnvFile({ config, environment });\n    // console.log(passPathForEnvVars);\n    prompt.get(environmentSchema({ ...config, environment }), (error, envConfig) => {\n      // write new envConfig\n      config.environments = {\n        ...config.environments,\n        [environment]: {\n          ...envConfig,\n          envVarsPassPath: passPathForEnvVars,\n        },\n      };\n      writeConfig(CONFIGFILE, {\n        ...config,\n        environments: {\n          ...config.environments,\n          [environment]: envConfig,\n        },\n      });\n      // update env-vars in path\n      // first get current vars in path\n      let envVars = readPassYaml(passPathForEnvVars);\n      // if envVars do not exist yet, create new one and write to pass\n      if (_.isEmpty(envVars)) {\n        envVars = defaultEnv({ config, envConfig });\n        writePass(passPathForEnvVars, yaml.safeDump(envVars));\n      }\n      // open editor to edit the en vars\n      editPass(passPathForEnvVars);\n      // load changed envVars and create env.sh on server\n      // we create ROOT_URL always from the config\n      const envSh = createEnvSh(\n        { version, environment },\n        {\n          ...readPassYaml(passPathForEnvVars),\n          ROOT_URL: envConfig.url,\n        },\n      );\n      // create env.sh on server\n      remoteExec(`echo \"${envSh.replace(/\"/g, '\\\\\"')}\" > ~/app/env.sh`, getSshConfig(CONFIGFILE, environment), (err) => {\n        if (err) {\n          throw err;\n        }\n        console.log('');\n        console.log('~/app/env.sh has ben written on ', envConfig.host);\n        done(null, `${environment} is set up, please restart server`);\n      }).pipe(process.stdout);\n    });\n  },\n  editEnv(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    const passPathForEnvVars = passEnvFile({ config, environment });\n    editPass(passPathForEnvVars);\n    done(null, 'env in pass edited. Remember that this not updates the server. Use catladder setup <env> to do so');\n  },\n  restart(environment, done) {\n    actionTitle(`restarting ${environment}`);\n    remoteExec('./bin/nodejs.sh restart', getSshConfig(CONFIGFILE, environment), () => {\n      done(null, 'server restarted');\n    }).pipe(process.stdout);\n  },\n  buildServer(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    // read build params\n    actionTitle(`building server ${environment}`);\n    execInstallNpmModules({ config });\n    execMeteorBuild({ config, environment }, ['--server-only']);\n    done(null, 'server built');\n  },\n  buildApps(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    const buildDir = getBuildDir({ config, environment });\n    actionTitle(`building mobile apps ${environment}`);\n    console.log(`build dir: ${buildDir}`);\n\n    // remove project folders if existing\n    // otherwise apps might get bloated with old code\n    if (fs.existsSync(getAndroidBuildProjectFolder({ config, environment }))) {\n      rimraf.sync(getAndroidBuildProjectFolder({ config, environment }));\n    }\n    if (fs.existsSync(getIosBuildProjectFolder({ config, environment }))) {\n      rimraf.sync(getIosBuildProjectFolder({ config, environment }));\n    }\n    execInstallNpmModules({ config });\n    execMeteorBuild({ config, environment });\n\n    // open ios project if exists\n    actions.iosRevealProject(environment, config);\n\n    // init android if it exists\n    if (fs.existsSync(getAndroidBuildDir({ config, environment }))) {\n      actions.androidPrepareForStore(environment, done);\n    } else {\n      done(null, `apps created in ${buildDir}`);\n    }\n  },\n  iosRevealProject(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    if (fs.existsSync(getIosBuildProjectFolder({ config, environment }))) {\n      execSync(`open ${getIosBuildProjectFolder({ config, environment })}`);\n    } else {\n      done(null, `ios project does not exist under ${getIosBuildProjectFolder({ config, environment })}`);\n    }\n  },\n  androidPrepareForStore(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    const outfile = androidPrepareForStore({ config, environment });\n    done(null, `your apk is ready: ${outfile}`);\n  },\n  androidInit(environment, done) {\n    const config = readConfig(CONFIGFILE);\n    androidInit({ config, environment });\n    done(null, 'android is init');\n  },\n  uploadServer(environment, done) {\n    const next = () => actions.restart(environment, done);\n    const config = readConfig(CONFIGFILE);\n    // const envConf = config.environments[environment];\n    const sshConfig = getSshConfig(CONFIGFILE, environment);\n    actionTitle(`uploading server bundle to ${environment}`);\n    const buildDir = getBuildDir({ config, environment });\n    execSync(`scp ${buildDir}/app.tar.gz ${sshConfig.user}@${sshConfig.host}:`, { stdio: 'inherit' });\n    remoteExec(`\n        rm -rf ~/app/last\n        mv ~/app/bundle ~/app/last\n        rm ~/app/current\n        ln -s ~/app/bundle ~/app/current\n        tar xfz app.tar.gz -C app\n        pushd ~/app/bundle/programs/server\n        npm install\n        popd\n      `, sshConfig, next).pipe(process.stdout);\n  },\n  deploy(environment, done) {\n    actionTitle(`deploying ${environment}`);\n    actions.buildServer(environment, () => {\n      actions.uploadServer(environment, done);\n    });\n  },\n};\nconst [commandRaw, environment] = options._;\nconst command = commandRaw && camelCase(commandRaw);\n\nintro('');\nintro('                                   🐱 🔧');\nintro('         ╔═════ PANTER CATLADDER ════════');\nintro('       ╔═╝');\nintro(`     ╔═╝           v${version}`);\nintro('   ╔═╝');\nintro(' ╔═╝');\nintro('═╝');\nintro('');\n\nconst doneSuccess = (message) => {\n  intro('');\n  intro('');\n  intro('╗');\n  intro(`╚═╗ ${message}  👋 🐱`);\n  intro('  ╚════════════════════════════════════════════════');\n};\n\nconst doneError = (error, message) => {\n  intro('');\n  intro('');\n  intro(`╗ 🙀  ${message}  😿`);\n  intro('╚══════════════════════════════════════════════════');\n  intro('😾         🐁 🐁 🐁 🐁 🐁 🐁');\n  console.log(`${error && (error.message || error.reason)}`);\n  intro('');\n  console.log(error && error.stack);\n  intro('═══════════════════════════════════════════════════');\n};\n\nconst done = (error, message) => {\n  if (!error) {\n    doneSuccess(message);\n  } else {\n    doneError(error, message);\n  }\n};\n\nif (actions[command]) {\n  if (command !== 'init' && !environment) {\n    doneError(null, 'please specify an environment');\n  } else {\n    try {\n      actions[command](environment, done);\n    } catch (e) {\n      done(e, 'command failed');\n    }\n  }\n} else {\n  console.log('available commands: ');\n  console.log('');\n  console.log(_.keys(actions).join('\\n'));\n  done();\n}\n"]}