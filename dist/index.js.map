{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import minimist from 'minimist';\nimport prompt from 'prompt';\n// import remoteExec from 'ssh-exec';\nimport _ from 'lodash';\nimport yaml from 'js-yaml';\nimport fs from 'fs';\nimport { execSync } from 'child_process';\n\nconst options = minimist(process.argv.slice(2));\nconst writeConfig = config => fs.writeFile('.catladder.yaml', yaml.safeDump(config), (err) => {\n  if (err) {\n    return console.log(err);\n  }\n});\nconst readConfig = () => yaml.safeLoad(fs.readFileSync('.catladder.yaml'));\nconst readPass = (path) => {\n  try {\n    return execSync(`pass show ${path}`, { stdio: [0] });\n  } catch (error) {\n    if (error.message.indexOf('is not in the password store') !== -1) {\n      return null;\n    }\n    throw error;\n  }\n};\n\nconst writePass = (path, content) => execSync(`pass insert ${path}`, { stdin: content });\nconst initSchema = {\n  properties: {\n    customer: {\n      description: 'Customer kÃ¼rzel',\n      required: true,\n      default: 'pan',\n    },\n    appname: {\n      description: 'App name (for dbs, filenames, etc.)',\n      type: 'string',\n      required: true,\n      pattern: /^[a-zA-Z]+$/,\n    },\n    passPath: {\n      description: 'Path in pass',\n      required: true,\n      default: () => `${prompt.history('customer').value}/${prompt.history('appname').value}`,\n    },\n    environments: {\n      description: 'environments',\n      type: 'string',\n      required: true,\n      pattern: /^[a-z,\\s]+$/,\n      default: 'staging, production',\n      before: v => v.split(',').map(_.trim),\n    },\n  },\n};\n\n\nconst environmentSchema = ({ environment, appname }) => ({\n  properties: {\n    sshHost: {\n      description: 'ssh host',\n      type: 'string',\n      required: true,\n      default: `${appname}-${environment}.panter.biz`,\n    },\n    sshUsername: {\n      description: 'ssh user',\n      default: 'app',\n    },\n    url: {\n      description: 'full url',\n      default: () => `https://${prompt.history('sshHost').value}`,\n    },\n  },\n});\n\nconst envVarsSchema = ({ config, envConfig }) => ({\n  properties: {\n    PORT: {\n      required: true,\n      pattern: /^[0-9]+$/,\n      default: 8080,\n    },\n    MONGO_URL: {\n      required: true,\n      default: `mongodb://localhost/${config.appname}`,\n    },\n    MONGO_OPLOG_URL: {\n      required: true,\n      default: 'mongodb://localhost/local',\n    },\n    MAIL_URL: {\n      required: true,\n      default: 'smtp://localhost:25',\n    },\n    ROOT_URL: {\n      required: true,\n      default: envConfig.url,\n    },\n  },\n});\n\nconst withDefaults = (schema, defaults = {}) => ({\n  ...schema,\n  properties: _.mapValues(schema.properties, (value, key) => ({\n    ...value,\n    default: () => defaults[key] || _.result(value, 'default'),\n  })),\n});\n\nconst actions = {\n  init() {\n    prompt.start();\n    prompt.get(initSchema, (error, { customer, appname, passPath, environments }) => {\n      const configFile = {\n        appname,\n        customer,\n        passPath,\n        environments: _.chain(environments).keyBy().mapValues(() => ({})).value(),\n      };\n      console.log('writing');\n      console.log(writeConfig(configFile));\n    });\n  },\n  setup(environments) {\n    const config = readConfig();\n    console.log(environments);\n    prompt.start();\n    environments.forEach((environment) => {\n      const passPathForEnvVars = `${config.passPath}/${environment}`;\n      // console.log(passPathForEnvVars);\n\n      const envVarsOld = readPass(passPathForEnvVars) || {};\n\n\n      prompt.get(environmentSchema({ ...config, environment }), (error, envConfig) => {\n        //\n\n        prompt.get(withDefaults(envVarsSchema({ config, envConfig, environment }), envVarsOld),\n        (varsError, envVars) => {\n          if (varsError) {\n            throw varsError;\n          }\n          writePass(passPathForEnvVars, envVars);\n          // create env object, should be flat key value\n          const envVarsSanitized = _.mapValues(envVars, (envVar) => {\n            if (_.isObject(envVar)) {\n              return JSON.stringify(envVar);\n            }\n            return envVar;\n          });\n\n          console.log(envVarsSanitized);\n        });\n      });\n    });\n  },\n\n};\nconst [command, ...environments] = options._;\nif (actions[command]) {\n  actions[command](environments);\n}\n"]}