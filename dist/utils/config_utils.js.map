{"version":3,"sources":["../../src/utils/config_utils.js"],"names":[],"mappings":";;;;;;;;kBAAe,IAAI;;;;sBACF,SAAS;;;;sBAEZ,QAAQ;;;;AAEtB,IAAM,UAAU,GAAG,iBAAiB,CAAC;;AAE9B,IAAM,WAAW,GAAG,SAAd,WAAW,CAAI,UAAU,EAAE,MAAM,EAAK;AACjD,MAAM,OAAO,GAAG,oBAAK,QAAQ,CAAC,MAAM,CAAC,CAAC;AACtC,kBAAG,aAAa,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;CACvC,CAAC;;AACK,IAAM,UAAU,GAAG,SAAb,UAAU;SAAS,oBAAK,QAAQ,CAAC,gBAAG,YAAY,CAAC,UAAU,CAAC,CAAC;CAAA,CAAC;;;AAEpE,IAAM,YAAY,GAAG,SAAf,YAAY,CAAI,UAAU,EAAE,WAAW,EAAK;AACvD,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;AAC5B,SAAO,oBAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;CACtF,CAAC;;;AAEF,IAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAI,KAAK,EAAK;AACnC,MAAI,oBAAE,QAAQ,CAAC,KAAK,CAAC,EAAE;AACrB,WAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;GAC9B;AACD,SAAO,KAAK,CAAC;CACd,CAAC;;AAEF,IAAM,yBAAyB,GAAG,SAA5B,yBAAyB,CAAG,OAAO;SACvC,oBAAE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG;WAAK;AAC1B,SAAG,EAAH,GAAG;AACH,WAAK,EAAE,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KACvC;GAAC,CAAC;CAAA,CAAC;;AAEC,IAAM,mBAAmB,GAAG,SAAtB,mBAAmB,CAAG,OAAO;SACxC,yBAAyB,CAAC,OAAO,CAAC,CAC/B,GAAG,CAAC,UAAC,IAAc;QAAZ,GAAG,GAAL,IAAc,CAAZ,GAAG;QAAE,KAAK,GAAZ,IAAc,CAAP,KAAK;WAAU,GAAG,WAAK,KAAK;GAAG,CAAC,CAC5C,IAAI,CAAC,GAAG,CAAC;CAAA,CAAC;;AACR,IAAM,WAAW,GAAG,SAAd,WAAW,CAAI,KAAwB,EAAE,OAAO,EAAK;MAApC,WAAW,GAAb,KAAwB,CAAtB,WAAW;MAAE,OAAO,GAAtB,KAAwB,CAAT,OAAO;;;AAEhD,MAAM,IAAI,GAAG,yBAAyB,CAAC,oBAAE,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAC/D,GAAG,CAAC,UAAC,KAAc;QAAZ,GAAG,GAAL,KAAc,CAAZ,GAAG;QAAE,KAAK,GAAZ,KAAc,CAAP,KAAK;uBAAiB,GAAG,WAAK,KAAK;GAAG,CAAC,CACnD,IAAI,CAAC,IAAI,CAAC,CAAC;AACd,MAAM,SAAS,qDAC4B,OAAO,yBACnC,WAAW,qDAGN,WAAW,uBAG9B,CAAC;AACF,SAAU,SAAS,UAAK,IAAI,CAAG;CAChC,CAAC","file":"config_utils.js","sourcesContent":["import fs from 'fs';\nimport yaml from 'js-yaml';\n\nimport _ from 'lodash';\n\nconst CONFIGFILE = '.catladder.yaml';\n\nexport const writeConfig = (configFile, config) => {\n  const theyaml = yaml.safeDump(config);\n  fs.writeFileSync(configFile, theyaml);\n};\nexport const readConfig = () => yaml.safeLoad(fs.readFileSync(CONFIGFILE));\n\nexport const getSshConfig = (configFile, environment) => {\n  const config = readConfig();\n  return _.pick(config.environments[environment], ['host', 'user', 'password', 'key']);\n};\n\nconst getSanitziedValue = (value) => {\n  if (_.isObject(value)) {\n    return JSON.stringify(value);\n  }\n  return value;\n};\n\nconst getKeyValueArraySanitized = envVars =>\n  _.keys(envVars).map(key => ({\n    key,\n    value: getSanitziedValue(envVars[key]),\n  }));\n\nexport const getEnvCommandString = envVars =>\n  getKeyValueArraySanitized(envVars)\n    .map(({ key, value }) => `${key}='${value}'`)\n    .join(' ');\nexport const createEnvSh = ({ environment, version }, envVars) => {\n  // build is excluded, that is only used while building\n  const body = getKeyValueArraySanitized(_.omit(envVars, ['build']))\n    .map(({ key, value }) => `export ${key}='${value}'`)\n    .join('\\n');\n  const envHeader = `\n# autocreated with PANTER CATLADDER 🐱 🔧 v${version}\n# environment: ${environment}\n#\n# DO NOT EDIT, use\n# $ catladder setup ${environment}\n# to edit\n#\n  `;\n  return `${envHeader}\\n${body}`;\n};\n"]}