{"version":3,"sources":["../src/android_build.js"],"names":[],"mappings":"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","file":"android_build.js","sourcesContent":["\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport moment from 'moment';\nimport path from 'path';\nimport _ from 'lodash';\nimport shellescape from 'shell-escape';\n\nimport { readPass, generatePass, hasPass } from './pass_utils';\n\nexport const getAndroidBuildDir = ({ config, environment }) => path.resolve(`${config.buildDir}/${environment}/android`);\nexport const getAndroidBuildProjectFolder = ({ config, environment }) => `${getAndroidBuildDir({ config, environment })}/project`;\nexport const getAndroidBuildTool = (config, buildTool) => path.resolve(`${process.env.ANDROID_HOME}/build-tools/${config.androidBuildToolVersion}/${buildTool}`);\n\nconst getKeystoreConfig = ({ config, environment }) => {\n  const envConfig = _.get(config, ['environments', environment]);\n  const keyStore = path.resolve(envConfig.androidKeystore);\n  const keystorePWPassPath = `${config.passPath}/android_keystore_pw`;\n  const keyname = envConfig.androidKeyname;\n  const keyDName = envConfig.androidDName;\n  return {\n    keyStore, keyname, keystorePWPassPath, keyDName,\n  };\n};\nconst getKeystoreProps = ({ config, environment }) => {\n  const keyStoreConfig = getKeystoreConfig({ config, environment });\n  const { keystorePWPassPath } = keyStoreConfig;\n  const keystorePW = _.trim(readPass(keystorePWPassPath));\n  return {\n    ...keyStoreConfig, keystorePW,\n  };\n};\n\n\nexport const androidInit = ({ config, environment }) => {\n  // create keystorePW if not existing\n  const { keystorePWPassPath } = getKeystoreConfig({ config, environment });\n  if (!hasPass(keystorePWPassPath)) {\n    generatePass(keystorePWPassPath);\n  }\n\n  // kudos to http://stackoverflow.com/questions/3997748/how-can-i-create-a-keystore\n  const { keystorePW, keyStore, keyname, keyDName } = getKeystoreProps({ config, environment });\n  const createKeyCommand = shellescape(['keytool', '-genkeypair', '-dname', keyDName, '-alias', keyname, '--storepass', keystorePW, '--keypass', keystorePW, '--keystore', keyStore, '-keyalg', 'RSA', '-keysize', 2048, '-validity', 10000]);\n  execSync(`echo y | ${createKeyCommand}`, { stdio: 'inherit' });\n};\n\nexport const androidPrepareForStore = ({ config, environment }) => {\n  const { keystorePW, keyStore, keyname } = getKeystoreProps({ config, environment });\n  const androidBuildDir = getAndroidBuildDir({ config, environment });\n  if (!fs.existsSync(androidBuildDir)) {\n    throw new Error('android build dir does not exist');\n  }\n  if (!fs.existsSync(keyStore)) {\n    throw new Error(`please call android-init ${environment} first`);\n  }\n  const now = moment().format('YYYYMMDD-HHmm');\n\n\n  const inFile = `${androidBuildDir}/release-unsigned.apk`;\n  const alignFile = `${androidBuildDir}/release-unsigned-aligned.apk`;\n  if (fs.existsSync(alignFile)) {\n    fs.unlinkSync(alignFile);\n  }\n  const zipAlignCommand = shellescape([getAndroidBuildTool(config, 'zipalign'), 4, inFile, alignFile]);\n  execSync(zipAlignCommand, { stdio: 'inherit' });\n\n  const outfile = `${androidBuildDir}/${config.appname}-${environment}-${now}.apk`;\n  if (fs.existsSync(outfile)) {\n    fs.unlinkSync(outfile);\n  }\n  const signCommand = shellescape([getAndroidBuildTool(config, 'apksigner'), 'sign', '--ks-key-alias', keyname, '--ks', keyStore, '--ks-pass', 'stdin', '--key-pass', 'stdin', '--out', outfile, alignFile]);\n  execSync(signCommand, { input: `${keystorePW}\\n${keystorePW}`, stdio: ['pipe', 1, 2] });\n\n\n  return outfile;\n};\n"]}