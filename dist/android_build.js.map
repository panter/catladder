{"version":3,"sources":["../src/android_build.js"],"names":[],"mappings":"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","file":"android_build.js","sourcesContent":["\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport moment from 'moment';\nimport path from 'path';\nimport _ from 'lodash';\n\nimport { readPass, generatePass, hasPass } from './pass_utils';\n\nexport const getAndroidBuildDir = (config, environment) => path.resolve(`${config.buildDir}/${environment}/android`);\n\nconst getKeystoreConfig = (config, environment) => {\n  const envConfig = _.get(config, ['environments', environment]);\n  const keyStore = path.resolve(envConfig.androidKeystore);\n  const keystorePWPassPath = `${config.passPath}/${environment}/android_keystore_pw`;\n  const keyname = `${config.appname}-${environment}`;\n  const keyDName = envConfig.androidDName;\n  return {\n    keyStore, keyname, keystorePWPassPath, keyDName,\n  };\n};\nconst getKeystoreProps = (config, environment) => {\n  const { keyStore, keyname, keystorePWPassPath } = getKeystoreConfig(config, environment);\n  const keystorePW = readPass(keystorePWPassPath);\n  return {\n    keystorePW, keyStore, keyname, keystorePWPassPath,\n  };\n};\n\n\nexport const initAndroid = (config, environment) => {\n  // create keystorePW if not existing\n  const { keystorePWPassPath } = getKeystoreConfig(config, environment);\n  if (!hasPass(keystorePWPassPath)) {\n    generatePass(keystorePWPassPath);\n  }\n\n  // kudos to http://stackoverflow.com/questions/3997748/how-can-i-create-a-keystore\n  const { keystorePW, keyStore, keyname, keyDName } = getKeystoreProps(config, environment);\n\n  const createKeyCommand = `echo y | keytool -genkeypair -dname \"${keyDName}\" -alias ${keyname} --storepass ${keystorePW} --keystore ${keyStore} -validity 100`;\n  execSync(createKeyCommand);\n};\n\nexport const prepareAndroidForStore = (config, environment, done) => {\n  const { keystorePW, keyStore, keyname } = getKeystoreProps(config, environment);\n  const androidBuildDir = getAndroidBuildDir(config, environment);\n  if (!fs.existsSync(androidBuildDir)) {\n    throw new Error('android build dir does not exist');\n  }\n  if (!fs.existsSync(keyStore)) {\n    throw new Error(`please call init-android ${environment} first`);\n  }\n  const now = moment.format('YYYYMMDD-HHmm');\n\n\n  const inFile = `${androidBuildDir}/release-unsigned.apk`;\n  const outfile = `${androidBuildDir}/${config.appname}-${environment}-${now}.apk`;\n  const jarsignCommand = `jarsigner -sigalg SHA1withRSA -digestalg SHA1 ${inFile} ${keyname} --keystore ${keyStore} --storepass ${keystorePW}`;\n  execSync(jarsignCommand, { stdio: [0, 1, 2] });\n  if (fs.existsSync(outfile)) {\n    fs.unlinkSync(outfile);\n  }\n\n  const zipAlignCommand = `\"$ANDROID_HOME/build-tools/23.0.3/zipalign\" 4 ${inFile} ${outfile}`;\n  execSync(zipAlignCommand, { stdio: [0, 1, 2] });\n  done(null, `your apk is ready: ${outfile}`);\n};\n"]}