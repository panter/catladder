{"version":3,"sources":["../../src/configs/prompt_schemas.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;sBACH,QAAQ;;;;AAE3B,IAAM,YAAY,GAAG,SAAf,YAAY,CAAI,MAAM;MAAE,QAAQ,yDAAG,EAAE;sBACtC,MAAM;AACT,cAAU,EAAE,oBAAE,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,UAAC,KAAK,EAAE,GAAG;0BACjD,KAAK;AACR,mBAAS;iBAAM,QAAQ,CAAC,GAAG,CAAC,IAAI,oBAAE,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC;SAAA;;KAC1D,CAAC;;CACH,CAAC;;AAEI,IAAM,UAAU,GAAG,SAAb,UAAU,CAAG,MAAM;SAC9B,YAAY,CACV;AACE,cAAU,EAAE;AACV,cAAQ,EAAE;AACR,mBAAW,EAAE,iBAAiB;AAC9B,gBAAQ,EAAE,IAAI;AACd,mBAAS,KAAK;OACf;AACD,aAAO,EAAE;AACP,mBAAW,EAAE,qCAAqC;AAClD,YAAI,EAAE,QAAQ;AACd,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,aAAa;OACvB;AACD,cAAQ,EAAE;AACR,mBAAW,EAAE,cAAc;AAC3B,gBAAQ,EAAE,IAAI;AACd,mBAAS;iBAAS,oBAAO,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,SAAI,oBAAO,OAAO,CAAC,SAAS,CAAC,CAAC,KAAK;SAAE;OACxF;AACD,YAAM,EAAE;AACN,mBAAW,EAAE,eAAe;AAC5B,YAAI,EAAE,QAAQ;AACd,mBAAS,OAAO;OACjB;AACD,cAAQ,EAAE;AACR,mBAAW,EAAE,iBAAiB;AAC9B,YAAI,EAAE,QAAQ;AACd,mBAAS,SAAS;OACnB;AACD,6BAAuB,EAAE;AACvB,mBAAW,EAAE,4BAA4B;AACzC,YAAI,EAAE,QAAQ;AACd,mBAAS,QAAQ;OAClB;AACD,aAAO,EAAE;AACP,mBAAW,EAAE,oCAAoC;AACjD,YAAI,EAAE,SAAS;AACf,mBAAS,IAAI;OACd;KACF;GACF,EACD,MAAM,CACP;CAAA,CAAC;;;AAEG,IAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAI,IAAmC;MAAjC,WAAW,GAAb,IAAmC,CAAjC,WAAW;MAAE,OAAO,GAAtB,IAAmC,CAApB,OAAO;;MAAK,MAAM,4BAAjC,IAAmC;;SACnE,YAAY,CACV;AACE,cAAU,EAAE;AACV,UAAI,EAAE;AACJ,mBAAW,EAAE,iDAAiD;AAC9D,YAAI,EAAE,QAAQ;AACd,gBAAQ,EAAE,IAAI;AACd,mBAAY,OAAO,SAAI,WAAW,gBAAa;OAChD;AACD,UAAI,EAAE;AACJ,mBAAW,EAAE,iDAAiD;AAC9D,mBAAS,KAAK;OACf;AACD,SAAG,EAAE;AACH,mBAAW,EAAE,UAAU;AACvB,mBAAS;8BAAiB,oBAAO,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK;SAAE;OACzD;AACD,qBAAe,EAAE;AACf,mBAAW,EAAE,uBAAuB;AACpC,YAAI,EAAE,QAAQ;AACd,mBAAS,oBAAoB;OAC9B;AACD,oBAAc,EAAE;AACd,mBAAW,EAAE,+BAA+B;AAC5C,mBAAY,OAAO,SAAI,WAAW,AAAE;OACrC;AACD,kBAAY,EAAE;AACZ,mBAAW,EAAE,uBAAuB;AACpC,YAAI,EAAE,QAAQ;AACd,mBAAS;iBAAM,sCAAsC;SAAA;OACtD;KACF;GACF,EACD,oBAAE,GAAG,CAAC,MAAM,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,CAC7C;CAAA,CAAC","file":"prompt_schemas.js","sourcesContent":["import _ from 'lodash';\nimport prompt from 'prompt';\n\nconst withDefaults = (schema, defaults = {}) => ({\n  ...schema,\n  properties: _.mapValues(schema.properties, (value, key) => ({\n    ...value,\n    default: () => defaults[key] || _.result(value, 'default'),\n  })),\n});\n\nexport const initSchema = config =>\n  withDefaults(\n    {\n      properties: {\n        customer: {\n          description: 'Customer kÃ¼rzel',\n          required: true,\n          default: 'pan',\n        },\n        appname: {\n          description: 'App name (for dbs, filenames, etc.)',\n          type: 'string',\n          required: true,\n          pattern: /^[a-zA-Z]+$/,\n        },\n        passPath: {\n          description: 'Path in pass',\n          required: true,\n          default: () => `${prompt.history('customer').value}/${prompt.history('appname').value}`,\n        },\n        appDir: {\n          description: 'app directory',\n          type: 'string',\n          default: './app',\n        },\n        buildDir: {\n          description: 'build directory',\n          type: 'string',\n          default: './build',\n        },\n        androidBuildToolVersion: {\n          description: 'android build tool version',\n          type: 'string',\n          default: '25.0.2',\n        },\n        useYarn: {\n          description: 'use yarn to build (false: use npm)',\n          type: 'boolean',\n          default: true,\n        },\n      },\n    },\n    config,\n  );\n\nexport const environmentSchema = ({ environment, appname, ...config }) =>\n  withDefaults(\n    {\n      properties: {\n        host: {\n          description: 'ssh host (deprecated, only for classic hosting)',\n          type: 'string',\n          required: true,\n          default: `${appname}-${environment}.panter.biz`,\n        },\n        user: {\n          description: 'ssh user (deprecated, only for classic hosting)',\n          default: 'app',\n        },\n        url: {\n          description: 'full url',\n          default: () => `https://${prompt.history('host').value}`,\n        },\n        androidKeystore: {\n          description: 'android keystore file',\n          type: 'string',\n          default: './android.keystore',\n        },\n        androidKeyname: {\n          description: 'Android keystore name / alias',\n          default: `${appname}-${environment}`,\n        },\n        androidDName: {\n          description: 'android dname for key',\n          type: 'string',\n          default: () => 'cn=Panter, ou=Panter, o=Panter, c=CH',\n        },\n      },\n    },\n    _.get(config, ['environments', environment]),\n  );\n"]}