{"version":3,"sources":["../../src/commands/run.js"],"names":[],"mappings":";;;;;;;;sBAAsB,QAAQ;;sBACX,QAAQ;;;;8BACA,iBAAiB;;;;kBAC7B,IAAI;;;;kBACJ,IAAI;;;;kCAES,wBAAwB;;iCACJ,uBAAuB;;+BAC1C,qBAAqB;;yBACjC,eAAe;;;;qBAEjB,UAAC,WAAW,EAAc,IAAI,EAAK;MAAlC,WAAW,gBAAX,WAAW,GAAG,SAAS;;AACrC,MAAM,MAAM,GAAG,oCAAY,CAAC;AAC5B,sBAAO,KAAK,EAAE,CAAC;;AAEf,MAAI,CAAC,MAAM,CAAC,GAAG,EAAE;AACf,UAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;GACxC;;MAEO,MAAM,GAAK,MAAM,CAAjB,MAAM;oBAEmB,MAAM,CAAC,GAAG;MAAnC,OAAO,eAAP,OAAO;MAAO,MAAM,eAAX,GAAG;;AAEpB,MAAM,kBAAkB,GAAG,qCAAY,EAAE,MAAM,EAAN,MAAM,EAAE,WAAW,EAAX,WAAW,EAAE,CAAC,CAAC;AAChE,MAAM,OAAO,GAAG,mCAAa,kBAAkB,CAAC,CAAC;;aAEjB,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE;;MAAzD,cAAc,QAAnB,GAAG;;AAEX,MAAM,OAAO,GAAG,mBAAM,EAAE,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAC3D,MAAI,WAAW,GAAG,EAAE,CAAC;;AAErB,MAAM,gBAAgB,GAAG,iCAAe,gBAAG,MAAM,EAAE,EAAE,UAAU,CAAC,CAAC;;AAEjE,MAAI,OAAO,KAAK,QAAQ,IAAI,OAAO,CAAC,eAAe,EAAE;AACnD,oBAAG,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;AAC5E,WAAO,OAAO,CAAC,eAAe,CAAC;;AAE/B,eAAW,oBAAkB,gBAAgB,AAAE,CAAC;GACjD;AACD,MAAM,SAAS,GAAG,4CAAoB,OAAO,CAAC,CAAC;AAC/C,MAAI;AACF,sCAAQ,MAAM,WAAS,MAAM,YAAS,EAAE,CAAA,GAAG,SAAS,SAAI,OAAO,SAAI,WAAW,CAAG,CAAC;GACnF,CAAC,OAAO,CAAC,EAAE;;GAEX,SAAS;AACR,QAAI,gBAAG,UAAU,CAAC,gBAAgB,CAAC,EAAE,gBAAG,UAAU,CAAC,gBAAgB,CAAC,CAAC;GACtE;AACD,MAAI,EAAE,CAAC;CACR","file":"run.js","sourcesContent":["import { merge } from 'lodash';\nimport prompt from 'prompt';\nimport uniqueFilename from 'unique-filename';\nimport fs from 'fs';\nimport os from 'os';\n\nimport { passEnvFile } from '../configs/directories';\nimport { readConfig, getEnvCommandString } from '../utils/config_utils';\nimport { readPassYaml } from '../utils/pass_utils';\nimport exec from '../utils/exec';\n\nexport default (environment = 'develop', done) => {\n  const config = readConfig();\n  prompt.start();\n\n  if (!config.run) {\n    throw new Error('please config `run`');\n  }\n\n  const { appDir } = config;\n\n  const { command, env: runEnv } = config.run;\n\n  const passPathForEnvVars = passEnvFile({ config, environment });\n  const passEnv = readPassYaml(passPathForEnvVars);\n\n  const { env: environmentEnv } = config.environments[environment] || {};\n\n  const fullEnv = merge({}, environmentEnv, passEnv, runEnv);\n  let commandArgs = '';\n  // damn https://github.com/meteor/meteor/issues/9907\n  const tempSettingsFile = uniqueFilename(os.tmpdir(), 'settings');\n\n  if (command === 'meteor' && fullEnv.METEOR_SETTINGS) {\n    fs.writeFileSync(tempSettingsFile, JSON.stringify(fullEnv.METEOR_SETTINGS));\n    delete fullEnv.METEOR_SETTINGS;\n\n    commandArgs = ` --settings ${tempSettingsFile}`;\n  }\n  const envString = getEnvCommandString(fullEnv);\n  try {\n    exec(`${appDir ? `cd ${appDir} && ` : ''}${envString} ${command} ${commandArgs}`);\n  } catch (e) {\n    // probably canceled\n  } finally {\n    if (fs.existsSync(tempSettingsFile)) fs.unlinkSync(tempSettingsFile);\n  }\n  done();\n};\n"]}