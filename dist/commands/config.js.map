{"version":3,"sources":["../../src/commands/config.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;sBACH,QAAQ;;;;sBACV,SAAS;;;;qCAEQ,2BAA2B;;kCACjC,wBAAwB;;iCACZ,uBAAuB;;+BACb,qBAAqB;;8BAC/C,oBAAoB;;;;kCACrB,wBAAwB;;;;iDACd,uCAAuC;;;;AAExE,IAAM,UAAU,GAAG,iBAAiB,CAAC;;qBAEtB,UAAC,WAAW,EAAE,IAAI,EAAK;AACpC,MAAM,MAAM,GAAG,oCAAY,CAAC;AAC5B,sBAAO,KAAK,EAAE,CAAC;;AAEf,mDAA0B,WAAW,CAAG,CAAC;AACzC,MAAM,kBAAkB,GAAG,qCAAY,EAAE,MAAM,EAAN,MAAM,EAAE,WAAW,EAAX,WAAW,EAAE,CAAC,CAAC;;AAEhE,MAAM,YAAY,GAAG,oBAAE,GAAG,CAAC,MAAM,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;AACtE,sBAAO,GAAG,CAAC,2DAAuB,MAAM,IAAE,WAAW,EAAX,WAAW,IAAG,EAAE,UAAC,KAAK,EAAE,SAAS,EAAK;;AAE9E,UAAM,CAAC,YAAY,gBACd,MAAM,CAAC,YAAY,sBACrB,WAAW,eACP,YAAY,EACZ,SAAS,GAEf,CAAC;AACF,wCAAY,UAAU,EAAE,MAAM,CAAC,CAAC;;;AAGhC,QAAI,OAAO,GAAG,mCAAa,kBAAkB,CAAC,CAAC;;AAE/C,QAAI,oBAAE,OAAO,CAAC,OAAO,CAAC,EAAE;AACtB,aAAO,GAAG,qCAAW,EAAE,MAAM,EAAN,MAAM,EAAE,SAAS,EAAT,SAAS,EAAE,CAAC,CAAC;AAC5C,sCAAU,kBAAkB,EAAE,oBAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;KACvD;;AAED,mCAAS,kBAAkB,CAAC,CAAC;;AAE7B,QAAM,OAAO,GAAG,oDAAqB,WAAW,EAAE,aAAa,CAAC,CAAC;AACjE,QAAI,OAAO,EAAE,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,KACnC;AACH,UAAI,EAAE,CAAC;KACR;GACF,CAAC,CAAC;CACJ","file":"config.js","sourcesContent":["import _ from 'lodash';\nimport prompt from 'prompt';\nimport yaml from 'js-yaml';\n\nimport { environmentSchema } from '../configs/prompt_schemas';\nimport { passEnvFile } from '../configs/directories';\nimport { readConfig, writeConfig } from '../utils/config_utils';\nimport { writePass, editPass, readPassYaml } from '../utils/pass_utils';\nimport actionTitle from '../ui/action_title';\nimport defaultEnv from '../configs/default_env';\nimport getDeploymentCommand from '../deployments/get_deployment_command';\n\nconst CONFIGFILE = '.catladder.yaml';\n\nexport default (environment, done) => {\n  const config = readConfig();\n  prompt.start();\n\n  actionTitle(`setting up ${environment}`);\n  const passPathForEnvVars = passEnvFile({ config, environment });\n  // console.log(passPathForEnvVars);\n  const oldEnvConfig = _.get(config, ['environments', environment], {});\n  prompt.get(environmentSchema({ ...config, environment }), (error, envConfig) => {\n    // write new envConfig\n    config.environments = {\n      ...config.environments,\n      [environment]: {\n        ...oldEnvConfig, // merge with old config\n        ...envConfig,\n      },\n    };\n    writeConfig(CONFIGFILE, config);\n    // update env-vars in path\n    // first get current vars in path\n    let envVars = readPassYaml(passPathForEnvVars);\n    // if envVars do not exist yet, create new one and write to pass\n    if (_.isEmpty(envVars)) {\n      envVars = defaultEnv({ config, envConfig });\n      writePass(passPathForEnvVars, yaml.safeDump(envVars));\n    }\n    // open editor to edit the en vars\n    editPass(passPathForEnvVars);\n\n    const command = getDeploymentCommand(environment, 'applyConfig');\n    if (command) command(environment, done);\n    else {\n      done();\n    }\n  });\n};\n"]}