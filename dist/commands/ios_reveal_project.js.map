{"version":3,"sources":["../../src/commands/ios_reveal_project.js"],"names":[],"mappings":";;;;;;;;6BAAyB,eAAe;;kBACzB,IAAI;;;;kCAEsB,wBAAwB;;iCACtC,uBAAuB;;qBAKnC,UAAC,WAAW,EAAE,IAAI,EAAK;AACpC,MAAM,MAAM,GAAG,oCAAY,CAAC;AAC5B,MAAI,gBAAG,UAAU,CAAC,kDAAyB,EAAE,MAAM,EAAN,MAAM,EAAE,WAAW,EAAX,WAAW,EAAE,CAAC,CAAC,EAAE;AACpE,2CAAiB,kDAAyB,EAAE,MAAM,EAAN,MAAM,EAAE,WAAW,EAAX,WAAW,EAAE,CAAC,CAAG,CAAC;GACvE,MAAM;AACL,QAAI,CAAC,IAAI,wCAAsC,kDAAyB,EAAE,MAAM,EAAN,MAAM,EAAE,WAAW,EAAX,WAAW,EAAE,CAAC,CAAG,CAAC;GACrG;CACF","file":"ios_reveal_project.js","sourcesContent":["import { execSync } from 'child_process';\nimport fs from 'fs';\n\nimport { getIosBuildProjectFolder } from '../configs/directories';\nimport { readConfig } from '../utils/config_utils';\n\n\n\n\nexport default (environment, done) => {\n  const config = readConfig();\n  if (fs.existsSync(getIosBuildProjectFolder({ config, environment }))) {\n    execSync(`open ${getIosBuildProjectFolder({ config, environment })}`);\n  } else {\n    done(null, `ios project does not exist under ${getIosBuildProjectFolder({ config, environment })}`);\n  }\n};\n"]}