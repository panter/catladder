{"version":3,"sources":["../../src/commands/setup.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;sBACH,QAAQ;;;;uBACJ,UAAU;;;;sBAChB,SAAS;;;;qCAEQ,2BAA2B;;iCACM,uBAAuB;;kCAC9D,wBAAwB;;2BAC5B,oBAAoB;;+BACM,qBAAqB;;8BAC/C,oBAAoB;;;;kCACrB,wBAAwB;;;;AAE/C,IAAM,UAAU,GAAG,iBAAiB,CAAC;;qBAGtB,UAAC,WAAW,EAAE,IAAI,EAAK;AACpC,MAAM,MAAM,GAAG,mCAAW,UAAU,CAAC,CAAC;AACtC,sBAAO,KAAK,EAAE,CAAC;;AAEf,mDAA0B,WAAW,CAAG,CAAC;AACzC,MAAM,kBAAkB,GAAG,qCAAY,EAAE,MAAM,EAAN,MAAM,EAAE,WAAW,EAAX,WAAW,EAAE,CAAC,CAAC;;AAEhE,MAAM,YAAY,GAAG,oBAAE,GAAG,CAAC,MAAM,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;AACtE,sBAAO,GAAG,CAAC,2DAAuB,MAAM,IAAE,WAAW,EAAX,WAAW,IAAG,EAAE,UAAC,KAAK,EAAE,SAAS,EAAK;;AAE9E,UAAM,CAAC,YAAY,gBACd,MAAM,CAAC,YAAY,sBACrB,WAAW,eACP,YAAY,EACZ,SAAS,GAEf,CAAC;AACF,wCAAY,UAAU,EAAE,MAAM,CAAC,CAAC;;;AAGhC,QAAI,OAAO,GAAG,mCAAa,kBAAkB,CAAC,CAAC;;AAE/C,QAAI,oBAAE,OAAO,CAAC,OAAO,CAAC,EAAE;AACtB,aAAO,GAAG,qCAAW,EAAE,MAAM,EAAN,MAAM,EAAE,SAAS,EAAT,SAAS,EAAE,CAAC,CAAC;AAC5C,sCAAU,kBAAkB,EAAE,oBAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;KACvD;;AAED,mCAAS,kBAAkB,CAAC,CAAC;;;AAG7B,QAAM,KAAK,GAAG,oCACZ,EAAE,OAAO,sBAAA,EAAE,WAAW,EAAX,WAAW,EAAE,eAEnB,mCAAa,kBAAkB,CAAC;AACnC,cAAQ,EAAE,SAAS,CAAC,GAAG;OAE1B,CAAC;;AAEF,yCAAoB,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,uBAAoB,qCAAa,UAAU,EAAE,WAAW,CAAC,EAAE,UAAC,GAAG,EAAK;AAChH,UAAI,GAAG,EAAE;AACP,cAAM,GAAG,CAAC;OACX;AACD,aAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAChB,aAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;AAChE,UAAI,CAAC,IAAI,EAAK,WAAW,uCAAoC,CAAC;KAC/D,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;GACzB,CAAC,CAAC;CACJ","file":"setup.js","sourcesContent":["import _ from 'lodash';\nimport prompt from 'prompt';\nimport remoteExec from 'ssh-exec';\nimport yaml from 'js-yaml';\n\nimport { environmentSchema } from '../configs/prompt_schemas';\nimport { getSshConfig, readConfig, writeConfig, createEnvSh } from '../utils/config_utils';\nimport { passEnvFile } from '../configs/directories';\nimport { version } from '../../package.json';\nimport { writePass, editPass, readPassYaml } from '../utils/pass_utils';\nimport actionTitle from '../ui/action_title';\nimport defaultEnv from '../configs/default_env';\n\nconst CONFIGFILE = '.catladder.yaml';\n\n\nexport default (environment, done) => {\n  const config = readConfig(CONFIGFILE);\n  prompt.start();\n\n  actionTitle(`setting up ${environment}`);\n  const passPathForEnvVars = passEnvFile({ config, environment });\n  // console.log(passPathForEnvVars);\n  const oldEnvConfig = _.get(config, ['environments', environment], {});\n  prompt.get(environmentSchema({ ...config, environment }), (error, envConfig) => {\n    // write new envConfig\n    config.environments = {\n      ...config.environments,\n      [environment]: {\n        ...oldEnvConfig, // merge with old config\n        ...envConfig,\n      },\n    };\n    writeConfig(CONFIGFILE, config);\n    // update env-vars in path\n    // first get current vars in path\n    let envVars = readPassYaml(passPathForEnvVars);\n    // if envVars do not exist yet, create new one and write to pass\n    if (_.isEmpty(envVars)) {\n      envVars = defaultEnv({ config, envConfig });\n      writePass(passPathForEnvVars, yaml.safeDump(envVars));\n    }\n    // open editor to edit the en vars\n    editPass(passPathForEnvVars);\n    // load changed envVars and create env.sh on server\n    // we create ROOT_URL always from the config\n    const envSh = createEnvSh(\n      { version, environment },\n      {\n        ...readPassYaml(passPathForEnvVars),\n        ROOT_URL: envConfig.url,\n      },\n    );\n    // create env.sh on server\n    remoteExec(`echo \"${envSh.replace(/\"/g, '\\\\\"')}\" > ~/app/env.sh`, getSshConfig(CONFIGFILE, environment), (err) => {\n      if (err) {\n        throw err;\n      }\n      console.log('');\n      console.log('~/app/env.sh has ben written on ', envConfig.host);\n      done(null, `${environment} is set up, please restart server`);\n    }).pipe(process.stdout);\n  });\n};\n"]}