{"version":3,"sources":["../../../src/deployments/panter-meteor-kubernetes/applyConfig.js"],"names":[],"mappings":";;;;;;;;kBAAe,IAAI;;;;sBAEsC,QAAQ;;yBAChB,cAAc;;kCACnC,2BAA2B;;iCAC5B,0BAA0B;;+BACxB,wBAAwB;;8BAC7B,uBAAuB;;;;yBAC9B,kBAAkB;;;;AAEnC,IAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAG,KAAK;SAAK,sBAAS,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,sBAAS,KAAK,CAAC;CAAC,CAAC;;qBAEhF,UAAC,WAAW,EAAE,IAAI,EAAK;AACpC,mEAA0C,WAAW,WAAQ,CAAC;AAC9D,MAAM,MAAM,GAAG,oCAAY,CAAC;AAC5B,MAAM,SAAS,GAAG,iDAAiC,MAAM,EAAE,WAAW,CAAC,CAAC;AACxE,mDAA0B,SAAS,CAAG,CAAC;;AAEvC,MAAM,kBAAkB,GAAG,qCAAY,EAAE,MAAM,EAAN,MAAM,EAAE,WAAW,EAAX,WAAW,EAAE,CAAC,CAAC;AAChE,MAAM,OAAO,GAAG,mCAAa,kBAAkB,CAAC,CAAC;;yCAM7C,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC;MAHlC,GAAG,oCAAH,GAAG;MACE,cAAc,oCAAnB,GAAG;qFACH,UAAU;MAAS,mBAAmB,+CAAxB,GAAG;gHAAuB,eAAe;MAAf,eAAe,+EAAG,EAAE;;AAG9D,iBAAe,CAAC,OAAO,CAAC,UAAC,UAAU,EAAK;QAC9B,IAAI,GAA8B,UAAU,CAA5C,IAAI;0BAA8B,UAAU,CAAtC,GAAG;QAAE,aAAa,mCAAG,EAAE;;AACrC,QAAM,QAAQ,GAAG,sBAAS,gBAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AACjD,QAAM,OAAO,GAAG;AACd,cAAQ,EAAE,GAAG;AACb,qBAAe,EAAE;AACf,kBAAQ;AACN,0BAAgB,EAAE,SAAS,EAC5B;OACF;KACF,CAAC;;AACF,QAAM,OAAO,GAAG,mBAAM,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,mBAAmB,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;;AAEhG,QAAM,OAAO,GAAG,iBAAI,OAAO,EAAE,UAAC,KAAK,EAAE,IAAI;aAAM,EAAE,IAAI,EAAJ,IAAI,EAAE,KAAK,EAAE,iBAAiB,CAAC,KAAK,CAAC,EAAE;KAAC,CAAC,CAAC;AAC3F,QAAM,IAAI,GAAG,QAAQ,CAAC;AACpB,WAAK,EAAE,SAAS;AAChB,SAAG,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;KAC7B,CAAC,CAAC;AACH,WAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC3B,gCAAK,oBAAoB,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;GACpE,CAAC,CAAC;AACH,MAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;CACpB","file":"applyConfig.js","sourcesContent":["import fs from 'fs';\n\nimport { template, map, isObject, toString, merge } from 'lodash';\nimport { getKubernetesImageNameFromConfig } from './libs/utils';\nimport { passEnvFile } from '../../configs/directories';\nimport { readConfig } from '../../utils/config_utils';\nimport { readPassYaml } from '../../utils/pass_utils';\nimport actionTitle from '../../ui/action_title';\nimport exec from '../../utils/exec';\n\nconst sanitizeKubeValue = value => (isObject(value) ? JSON.stringify(value) : toString(value));\n\nexport default (environment, done) => {\n  actionTitle(`applying kubernetes config ${environment}  ðŸ’« `);\n  const config = readConfig();\n  const imageName = getKubernetesImageNameFromConfig(config, environment);\n  actionTitle(`imageName: ${imageName}`);\n\n  const passPathForEnvVars = passEnvFile({ config, environment });\n  const passEnv = readPassYaml(passPathForEnvVars);\n\n  const {\n    url,\n    env: environmentEnv,\n    deployment: { env: commonDeploymentEnv, kubeDeployments = [] },\n  } = config.environments[environment];\n\n  kubeDeployments.forEach((deployment) => {\n    const { file, env: deploymentEnv = {} } = deployment;\n    const compiled = template(fs.readFileSync(file));\n    const baseEnv = {\n      ROOT_URL: url,\n      METEOR_SETTINGS: {\n        public: {\n          KUBERNETES_IMAGE: imageName, // useful to show the actual image on the client\n        },\n      },\n    };\n    const fullEnv = merge({}, baseEnv, environmentEnv, commonDeploymentEnv, deploymentEnv, passEnv);\n    \n    const kubeEnv = map(fullEnv, (value, name) => ({ name, value: sanitizeKubeValue(value) }));\n    const yaml = compiled({\n      image: imageName,\n      env: JSON.stringify(kubeEnv),\n    });\n    console.log('apply', yaml);\n    exec('kubectl apply -f -', { input: yaml, stdio: ['pipe', 1, 2] });\n  });\n  done(null, 'done');\n};\n"]}