{"version":3,"sources":["../../src/deployments/get_deployment_command.js"],"names":[],"mappings":";;;;;;;;iCAA2B,uBAAuB;;gBAC1B,IAAI;;;;qBAEb,UAAC,WAAW,EAAE,OAAO,EAAK;AACvC,MAAM,MAAM,GAAG,oCAAY,CAAC;MACpB,UAAU,GAAK,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAA/C,UAAU;;aACyB,UAAU,IAAI,EAAE;;uBAAnD,IAAI;MAAJ,IAAI,6BAAG,uBAAuB;;AACtC,MAAI,cAAY,IAAI,CAAC,EAAE;AACrB,QAAI,cAAY,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE;AAC9B,aAAO,cAAY,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC;KACnC;AACD,UAAM,IAAI,KAAK,iCAA+B,OAAO,iBAAY,IAAI,CAAG,CAAC;GAC1E,MAAM;AACL,UAAM,IAAI,KAAK,8BAA4B,IAAI,CAAG,CAAC;GACpD;CACF","file":"get_deployment_command.js","sourcesContent":["import { readConfig } from '../utils/config_utils';\nimport deployments from './';\n\nexport default (environment, command) => {\n  const config = readConfig();\n  const { deployment } = config.environments[environment];\n  const { type = 'panter-meteor-classic' } = deployment || {};\n  if (deployments[type]) {\n    if (deployments[type][command]) {\n      return deployments[type][command];\n    }\n    throw new Error(`Unkown deployment-command: ${command} in type ${type}`);\n  } else {\n    throw new Error(`Unkown deployment-type: ${type}`);\n  }\n};\n"]}